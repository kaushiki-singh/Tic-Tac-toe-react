{"version":3,"sources":["components/Header.js","components/Square.js","components/GameBoard.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","Square","index","executor","gameState","borderString","drawGrid","onClick","e","value","GameBoard","useState","currentPlayer","setCurrentPlayer","emptyGame","setGameState","moves","setMoves","executeMove","console","log","newGameState","table","result","checkWinOrDraw","alert","moveNumber","win","lines","i","length","a","b","c","map","square","key","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c523a8c6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className=\"text-center\r\n         header\r\n          shadow-lg\r\n           p-3 mb\">Tic-Tac-Toe          \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst Square = ({index, executor, gameState}) => {\r\n    \r\n\r\n    //for drawing borders on expected positions\r\n    const drawGrid = index => {\r\n        let borderString = \"\";\r\n\r\n        if(index < 3){\r\n            borderString += \"bb\";\r\n        }\r\n         else if(index >= 6){\r\n            borderString += \"bt\";\r\n        }\r\n\r\n        if(index ===1 || index === 4 || index === 7){\r\n            borderString += \" bsb\";\r\n        }\r\n       return borderString;\r\n    }\r\n    return (\r\n        <>\r\n             <div className={`x10 text-center gameSquare ${drawGrid(index)}`}\r\n             onClick={e => executor(index)}>\r\n                 {gameState[index].value}\r\n                 </div>      \r\n        </>\r\n    );\r\n};\r\n\r\nexport default Square;","import  {useState} from 'react';\r\nimport Square from './Square';\r\n\r\nconst GameBoard = () => {\r\n\r\n    //we need current player and gameState\r\n    const [currentPlayer, setCurrentPlayer] = useState(\"X\");\r\n\r\n    const emptyGame =[\r\n        {value:null},\r\n        {value:null},\r\n        {value:null},\r\n        {value:null},\r\n        {value:null},\r\n        {value:null},\r\n        {value:null},\r\n        {value:null},\r\n        {value:null}\r\n        ]\r\n    const [gameState, setGameState] = useState(emptyGame);\r\n\r\n    const [moves, setMoves] = useState(0);\r\n\r\n    const executeMove = (index) =>{\r\n        console.log(index);\r\n        let newGameState = gameState;\r\n        if(newGameState[index].value===null){\r\n    //set the current mark\r\n    // means by clicking on a box just change the newGame state for that index as whatever is in current player\r\n        newGameState[index].value = currentPlayer;\r\n        setGameState(newGameState);\r\n     //change the current player\r\n        let nextPlayer = currentPlayer === \"X\" ? \"O\" : \"X\";\r\n        setCurrentPlayer(nextPlayer);\r\n        console.table(gameState);\r\n        \r\n        //after every new move check for win\r\n        let result = checkWinOrDraw();\r\n        console.log(result);\r\n        if(result !== false){\r\n            alert(`Player ${result} wins`);\r\n        };\r\n        let moveNumber = moves +1;\r\n        setMoves(moveNumber);\r\n        if(moveNumber==9){\r\n            alert('Game is Draw');\r\n        }\r\n        }\r\n}\r\n  //check for winning condition\r\nconst checkWinOrDraw = () => {\r\n\r\n    let win = false;\r\n    const lines = [\r\n\t\t[0, 1, 2],\r\n\t\t[3, 4, 5],\r\n\t\t[6, 7, 8],\r\n\t\t[0, 3, 6],\r\n\t\t[1, 4, 7],\r\n\t\t[2, 5, 8],\r\n\t\t[0, 4, 8],\r\n\t\t[2, 4, 6],\r\n\t];\r\n    for(let i=0; i<lines.length; i++){\r\n        const [a,b,c] = lines[i];\r\n    if(gameState[a].value && (gameState[a].value === gameState[b].value) && \r\n    (gameState[b].value === gameState[c].value)){\r\n           win = gameState[a].value;\r\n        }\r\n    }\r\n    return win;\r\n       //check if all fill and no win then draw\r\n       \r\n        \r\n}\r\nconst playAgain = () => {\r\n    setGameState(emptyGame);\r\n    setCurrentPlayer(\"X\");\r\n}\r\n \r\n\r\n    return (\r\n        <>\r\n        <div className=\"col-md-12 col-12\r\n        text-center\">\r\n            <h2>Current Player: {currentPlayer}</h2>\r\n            <h2>\r\n                <button onClick={playAgain}>Play again</button>\r\n            </h2>\r\n            \r\n        </div>\r\n        <div className=\"bg-white\r\n         col-md-6\r\n          offset-md-3\r\n           gameBoard\r\n            shadow-sm\r\n             row \r\n             p-4\">\r\n                 {gameState.map((square, key) => (\r\n                     <Square key={key} gameState={gameState} index={key}\r\n                     executor={executeMove}/>\r\n                 ))} \r\n             </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default GameBoard;","import 'bootstrap/dist/css/bootstrap.css';\nimport Header from './components/Header'\nimport './App.css';\nimport GameBoard from './components/GameBoard';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <GameBoard />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}